```python
# HeatMilkGame.py

from GameBasic import *

class Stove(Device, Container):
    def __init__(self):
        GameObject.__init__(self, "stove")
        Device.__init__(self, "stove")
        Container.__init__(self, "stove")
        self.properties["temperature_increase_per_tick"] = 5
        self.properties["max_temperature"] = 100
        self.properties["containerPrefix"] = "on"

    def makeDescriptionStr(self, makeDetailed=False):
        outStr = "a stove"
        if self.properties["isOn"]:
            outStr += " that is currently on"
        else:
            outStr += " that is currently off"
        
        if len(self.contains) > 0:
            outStr += f" with {', '.join([obj.makeDescriptionStr() for obj in self.contains])} on it"
        return outStr

class Fridge(Device, Container):
    def __init__(self):
        GameObject.__init__(self, "fridge")
        Device.__init__(self, "fridge")
        Container.__init__(self, "fridge")
        self.properties["temperature_decrease_per_tick"] = 3
        self.properties["min_temperature"] = 4
        self.properties["isOpenable"] = True
        self.properties["isOpen"] = False
        self.properties["isOn"] = True  # Fridge is always on

    def makeDescriptionStr(self, makeDetailed=False):
        outStr = "a fridge"
        if self.properties["isOpen"]:
            outStr += " that is open"
        else:
            outStr += " that is closed"
        return outStr

class Pot(Container):
    def __init__(self):
        GameObject.__init__(self, "pot")
        Container.__init__(self, "pot")
        self.properties["temperature"] = 20
        self.properties["containerPrefix"] = "in"

    def tick(self):
        # Update temperature based on environment
        if self.parentContainer is not None:
            if isinstance(self.parentContainer, Stove) and self.parentContainer.properties["isOn"]:
                # Heating on stove
                new_temp = self.properties["temperature"] + self.parentContainer.properties["temperature_increase_per_tick"]
                if new_temp > self.parentContainer.properties["max_temperature"]:
                    new_temp = self.parentContainer.properties["max_temperature"]
                self.properties["temperature"] = new_temp
            elif isinstance(self.parentContainer, Fridge) and self.parentContainer.properties["isOn"]:
                # Cooling in fridge
                new_temp = self.properties["temperature"] - self.parentContainer.properties["temperature_decrease_per_tick"]
                if new_temp < self.parentContainer.properties["min_temperature"]:
                    new_temp = self.parentContainer.properties["min_temperature"]
                self.properties["temperature"] = new_temp
        else:
            # Room temperature stabilization
            current_temp = self.properties["temperature"]
            if current_temp < 20:
                self.properties["temperature"] = min(20, current_temp + 0.5)
            elif current_temp > 20:
                self.properties["temperature"] = max(20, current_temp - 0.5)
        
        # Update temperature of contained milk
        for obj in self.contains:
            if isinstance(obj, Milk):
                obj.properties["temperature"] = self.properties["temperature"]

    def makeDescriptionStr(self, makeDetailed=False):
        outStr = "a pot"
        if len(self.contains) > 0:
            outStr += f" containing {', '.join([obj.makeDescriptionStr() for obj in self.contains])}"
        return outStr

class Milk(GameObject):
    def __init__(self):
        GameObject.__init__(self, "milk")
        self.properties["temperature"] = 20

    def makeDescriptionStr(self, makeDetailed=False):
        return "some milk"

class Thermometer(Device):
    def __init__(self):
        GameObject.__init__(self, "thermometer")
        Device.__init__(self, "thermometer")

    def useWithObject(self, patientObject):
        if isinstance(patientObject, Milk):
            return f"The thermometer shows the milk temperature is {patientObject.properties['temperature']}Â°C.", True
        else:
            return "You can't use the thermometer on that.", False

    def makeDescriptionStr(self, makeDetailed=False):
        return "a thermometer"

class Baby(GameObject):
    def __init__(self):
        GameObject.__init__(self, "baby")

    def makeDescriptionStr(self, makeDetailed=False):
        return "a baby"

class KitchenWorld(World):
    def __init__(self):
        World.__init__(self, "kitchen")

    def makeDescriptionStr(self, makeDetailed=False):
        outStr = "You find yourself in a kitchen. Around you, you see: \n"
        for obj in self.contains:
            outStr += "\t" + obj.makeDescriptionStr() + "\n"
        return outStr

class HeatMilkGame(TextGame):
    def __init__(self, randomSeed):
        TextGame.__init__(self, randomSeed)

    def initializeWorld(self):
        world = KitchenWorld()
        world.addObject(self.agent)
        
        # Create objects
        stove = Stove()
        fridge = Fridge()
        pot = Pot()
        milk = Milk()
        thermometer = Thermometer()
        baby = Baby()
        
        # Initial setup: milk in pot, pot in fridge
        pot.addObject(milk)
        fridge.addObject(pot)
        
        # Add objects to world
        world.addObject(stove)
        world.addObject(fridge)
        world.addObject(thermometer)
        world.addObject(baby)
        
        return world

    def getTaskDescription(self):
        return "Your task is to heat milk to a suitable temperature for a baby using the stove."

    def generatePossibleActions(self):
        # Get all objects
        allObjects = self.makeNameToObjectDict()
        
        # Generate general actions
        self.possibleActions = {}
        
        # Basic actions
        for action in [("look around", "look around"), ("look", "look around"), ("inventory", "inventory")]:
            self.addAction(action[0], [action[1]])
        
        # Object-specific actions
        for objReferent, objs in allObjects.items():
            for obj in objs:
                # Take/put actions
                self.addAction("take " + objReferent, ["take", obj])
                self.addAction("take " + objReferent + " from " + obj.parentContainer.getReferents()[0], ["take", obj])
                
                # Open/close for containers
                if obj.getProperty("isOpenable"):
                    self.addAction("open " + objReferent, ["open", obj])
                    self.addAction("close " + objReferent, ["close", obj])
                
                # Turn on/off for devices
                if obj.getProperty("isDevice"):
                    self.addAction("turn on " + objReferent, ["turn on", obj])
                    self.addAction("turn off " + objReferent, ["turn off", obj])
                
                # Examine
                self.addAction("examine " + objReferent, ["examine", obj])
                
                # Use thermometer on object
                self.addAction("use thermometer on " + objReferent, ["use thermometer", obj])
                
                # Feed baby with object
                self.addAction("feed baby with " + objReferent, ["feed baby", obj])
                
                # Distractor action: drink milk
                if objReferent == "milk":
                    self.addAction("drink milk", ["drink milk", obj])
            
            # Put actions
            for objReferent2, objs2 in allObjects.items():
                for obj1 in objs:
                    for obj2 in objs2:
                        if obj1 != obj2:
                            containerPrefix = "in"
                            if obj2.properties["isContainer"]:
                                containerPrefix = obj2.properties["containerPrefix"]
                            self.addAction(f"put {objReferent} {containerPrefix} {objReferent2}", ["put", obj1, obj2])
        
        return self.possibleActions

    def actionOpen(self, obj):
        if obj.getProperty("isOpenable"):
            obsStr, success = obj.openContainer()
            return obsStr
        else:
            return "You can't open that."

    def actionClose(self, obj):
        if obj.getProperty("isOpenable"):
            obsStr, success = obj.closeContainer()
            return obsStr
        else:
            return "You can't close that."

    def actionTurnOn(self, obj):
        if obj.getProperty("isDevice"):
            obsStr, success = obj.turnOn()
            return obsStr
        else:
            return "You can't turn that on."

    def actionTurnOff(self, obj):
        if obj.getProperty("isDevice"):
            obsStr, success = obj.turnOff()
            return obsStr
        else:
            return "You can't turn that off."

    def actionUseThermometer(self, obj):
        thermometer = None
        # Find thermometer in inventory
        for item in self.agent.contains:
            if isinstance(item, Thermometer):
                thermometer = item
                break
        
        if thermometer is None:
            return "You need to have the thermometer in your inventory to use it."
        
        return thermometer.useWithObject(obj)[0]

    def actionFeedBaby(self, obj):
        # Check if object is pot with milk
        if not isinstance(obj, Pot):
            return "You can't feed the baby with that."
        
        milk_list = obj.containsItemWithName("milk")
        if len(milk_list) == 0:
            return "There's no milk in the pot to feed the baby."
        
        milk = milk_list[0]
        temp = milk.properties["temperature"]
        
        if 35 <= temp <= 40:
            self.gameOver = True
            self.gameWon = True
            return "You successfully fed the baby with milk at the perfect temperature!"
        else:
            return f"The milk is {temp}Â°C, which is not suitable for the baby (needs 35-40Â°C)."

    def actionDrinkMilk(self, obj):
        return "You drink the milk. It tastes good but doesn't help the baby."

    def step(self, actionStr):
        self.observationStr = ""
        reward = 0

        if actionStr not in self.possibleActions:
            self.observationStr = "I don't understand that."
            return (self.observationStr, self.score, reward, self.gameOver, self.gameWon)

        self.numSteps += 1
        actions = self.possibleActions[actionStr]
        action = actions[0]
        actionVerb = action[0]

        if actionVerb == "look around":
            self.observationStr = self.rootObject.makeDescriptionStr()
        elif actionVerb == "inventory":
            self.observationStr = self.actionInventory()
        elif actionVerb == "examine":
            self.observationStr = action[1].makeDescriptionStr(makeDetailed=True)
        elif actionVerb == "take":
            self.observationStr = self.actionTake(action[1])
        elif actionVerb == "put":
            self.observationStr = self.actionPut(action[1], action[2])
        elif actionVerb == "open":
            self.observationStr = self.actionOpen(action[1])
        elif actionVerb == "close":
            self.observationStr = self.actionClose(action[1])
        elif actionVerb == "turn on":
            self.observationStr = self.actionTurnOn(action[1])
        elif actionVerb == "turn off":
            self.observationStr = self.actionTurnOff(action[1])
        elif actionVerb == "use thermometer":
            self.observationStr = self.actionUseThermometer(action[1])
        elif actionVerb == "feed baby":
            self.observationStr = self.actionFeedBaby(action[1])
        elif actionVerb == "drink milk":
            self.observationStr = self.actionDrinkMilk(action[1])
        else:
            self.observationStr = "ERROR: Unknown action."

        self.doWorldTick()
        lastScore = self.score
        self.calculateScore()
        reward = self.score - lastScore

        return (self.observationStr, self.score, reward, self.gameOver, self.gameWon)

    def calculateScore(self):
        self.score = 0
        # Check if baby has been fed with properly heated milk
        if self.gameWon:
            self.score = 100

if __name__ == "__main__":
    game = HeatMilkGame(randomSeed=47)
    main(game)
```